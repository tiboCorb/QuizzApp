package com.example.quizzapp.quizzAppDb;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "LANGUAGE".
*/
public class LanguageDao extends AbstractDao<Language, Long> {

    public static final String TABLENAME = "LANGUAGE";

    /**
     * Properties of entity Language.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property LanguageID = new Property(0, Long.class, "languageID", true, "_id");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property Logo = new Property(2, String.class, "logo", false, "LOGO");
    }


    public LanguageDao(DaoConfig config) {
        super(config);
    }
    
    public LanguageDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"LANGUAGE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: languageID
                "\"NAME\" TEXT," + // 1: name
                "\"LOGO\" TEXT);"); // 2: logo
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"LANGUAGE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Language entity) {
        stmt.clearBindings();
 
        Long languageID = entity.getLanguageID();
        if (languageID != null) {
            stmt.bindLong(1, languageID);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String logo = entity.getLogo();
        if (logo != null) {
            stmt.bindString(3, logo);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Language entity) {
        stmt.clearBindings();
 
        Long languageID = entity.getLanguageID();
        if (languageID != null) {
            stmt.bindLong(1, languageID);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String logo = entity.getLogo();
        if (logo != null) {
            stmt.bindString(3, logo);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Language readEntity(Cursor cursor, int offset) {
        Language entity = new Language( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // languageID
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2) // logo
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Language entity, int offset) {
        entity.setLanguageID(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setLogo(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Language entity, long rowId) {
        entity.setLanguageID(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Language entity) {
        if(entity != null) {
            return entity.getLanguageID();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Language entity) {
        return entity.getLanguageID() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
