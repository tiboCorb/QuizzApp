package com.example.quizzapp.quizzAppDb;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "RESULT".
*/
public class ResultDao extends AbstractDao<Result, Long> {

    public static final String TABLENAME = "RESULT";

    /**
     * Properties of entity Result.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property ResultId = new Property(0, Long.class, "resultId", true, "_id");
        public final static Property UserId = new Property(1, Long.class, "userId", false, "USER_ID");
        public final static Property QuizzId = new Property(2, Long.class, "quizzId", false, "QUIZZ_ID");
        public final static Property Score = new Property(3, Long.class, "score", false, "SCORE");
    }

    private Query<Result> quizzUser_ResultsListQuery;

    public ResultDao(DaoConfig config) {
        super(config);
    }
    
    public ResultDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"RESULT\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: resultId
                "\"USER_ID\" INTEGER," + // 1: userId
                "\"QUIZZ_ID\" INTEGER," + // 2: quizzId
                "\"SCORE\" INTEGER);"); // 3: score
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"RESULT\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Result entity) {
        stmt.clearBindings();
 
        Long resultId = entity.getResultId();
        if (resultId != null) {
            stmt.bindLong(1, resultId);
        }
 
        Long userId = entity.getUserId();
        if (userId != null) {
            stmt.bindLong(2, userId);
        }
 
        Long quizzId = entity.getQuizzId();
        if (quizzId != null) {
            stmt.bindLong(3, quizzId);
        }
 
        Long score = entity.getScore();
        if (score != null) {
            stmt.bindLong(4, score);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Result entity) {
        stmt.clearBindings();
 
        Long resultId = entity.getResultId();
        if (resultId != null) {
            stmt.bindLong(1, resultId);
        }
 
        Long userId = entity.getUserId();
        if (userId != null) {
            stmt.bindLong(2, userId);
        }
 
        Long quizzId = entity.getQuizzId();
        if (quizzId != null) {
            stmt.bindLong(3, quizzId);
        }
 
        Long score = entity.getScore();
        if (score != null) {
            stmt.bindLong(4, score);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Result readEntity(Cursor cursor, int offset) {
        Result entity = new Result( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // resultId
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // userId
            cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2), // quizzId
            cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3) // score
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Result entity, int offset) {
        entity.setResultId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUserId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setQuizzId(cursor.isNull(offset + 2) ? null : cursor.getLong(offset + 2));
        entity.setScore(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Result entity, long rowId) {
        entity.setResultId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Result entity) {
        if(entity != null) {
            return entity.getResultId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Result entity) {
        return entity.getResultId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "resultsList" to-many relationship of QuizzUser. */
    public List<Result> _queryQuizzUser_ResultsList(Long userId) {
        synchronized (this) {
            if (quizzUser_ResultsListQuery == null) {
                QueryBuilder<Result> queryBuilder = queryBuilder();
                queryBuilder.join(Result.class, ResultDao.Properties.ResultId)
                    .where(ResultDao.Properties.UserId.eq(userId));
                quizzUser_ResultsListQuery = queryBuilder.build();
            }
        }
        Query<Result> query = quizzUser_ResultsListQuery.forCurrentThread();
        query.setParameter(0, userId);
        return query.list();
    }

}
